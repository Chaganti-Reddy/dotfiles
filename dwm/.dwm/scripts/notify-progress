#!/usr/bin/env sh

# progress-notify - send audio and brightness notifications for dunst

# dependencies: dunstify, ponymix, papirus (icons)

### how to use: ###
# pass the values via stdin and provide the notification type
# as an argument. options are audio, brightness and muted

### audio notifications ###
#   ponymix increase 5 | notify audio
#   ponymix decrease 5 | notify audio
#   pulsemixer --toggle-mute --get-mute | notify muted
### brightness notifications ###
#   xbacklight -inc 5  && xbacklight -get | notify brightness
#   xbacklight -dec 5  && xbacklight -get | notify brightness

audioloc="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notifymuted() {
        volume="$1"
        dunstify -h string:x-canonical-private-synchronous:audio "muted" -h int:value:"$volume" -t 1500 --icon /usr/share/icons/dunst/volume-mute.png
}

notifyaudio() {
        volume="$1"
        # pamixer --get-mute && notifymuted "$volume" && return

        # check if audio is muted
        if [ $(pamixer --get-mute) = true ]; then
                notifymuted "$volume"
                return
        fi

        paplay $audioloc &
        if [ $volume -eq 0 ]; then
                notifymuted "$volume"
        elif [ $volume -le 30 ]; then
                dunstify -h string:x-canonical-private-synchronous:audio "volume: " -h int:value:"$volume" -t 1500 --icon /usr/share/icons/dunst/volume-low.png
        elif [ $volume -le 70 ]; then
                dunstify -h string:x-canonical-private-synchronous:audio "volume: " -h int:value:"$volume" -t 1500 --icon /usr/share/icons/dunst/volume-mid.png
        else
                dunstify -h string:x-canonical-private-synchronous:audio "volume: " -h int:value:"$volume" -t 1500 --icon /usr/share/icons/dunst/volume-high.png
        fi
}

notifybrightness() {
        brightness="$1"
        if [ $brightness -eq 0 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "brightness: " -h int:value:"$brightness" -t 1500 --icon /usr/share/icons/dunst/brightness-20.png
        elif [ $brightness -le 30 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "brightness: " -h int:value:"$brightness" -t 1500 --icon /usr/share/icons/dunst/brightness-40.png
        elif [ $brightness -le 60 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "brightness: " -h int:value:"$brightness" -t 1500 --icon /usr/share/icons/dunst/brightness-60.png
        elif [ $brightness -le 80 ]; then
                dunstify -h string:x-canonical-private-synchronous:brightness "brightness: " -h int:value:"$brightness" -t 1500 --icon /usr/share/icons/dunst/brightness-60.png
        else
                dunstify -h string:x-canonical-private-synchronous:brightness "brightness: " -h int:value:"$brightness" -t 1500 --icon /usr/share/icons/dunst/brightness-100.png
        fi
}

case "$1" in
        muted)
                volume=`pamixer --get-volume`

                # check if audio is muted
                if [ $(pamixer --get-mute) = true ]; then
                        notifymuted "$volume"
                        return
                else
                        notifyaudio "$volume"
                fi
                ;;
        audio)
                volume=`pamixer --get-volume`
                notifyaudio "$volume"
                ;;
        brightness)
                input=$(xbacklight -get)
                brightness=$(printf "%.0f" "$input")
                notifybrightness "$brightness"
                ;;

        *)
                echo "not the right arguments"
                echo "$1"
                exit 2
esac
